binary.random           package:openmetar           R Documentation



_U_s_a_g_e:

     binary.random(binaryData, params)

_A_r_g_u_m_e_n_t_s:

binaryData: 

  params: 

_E_x_a_m_p_l_e_s:

     ##---- Should be DIRECTLY executable !! ----
     ##-- ==>  Define data, use random,
     ##--    or do  help(data=index)  for the standard data sets.

     ## The function is currently defined as
     function (binaryData, params) 
     {
         if (!("BinaryData" %in% class(binaryData))) 
             stop("Binary data expected.")
         results <- NULL
         if (length(binaryData@g1O1) == 1 || length(binaryData@y) == 
             1) {
             res <- get.res.for.one.binary.study(binaryData, params)
             results <- list(summary = res)
         }
         else {
             if (length(binaryData@g1O1) > 0) {
                 res <- rma.uni(ai = binaryData@g1O1, bi = binaryData@g1O2, 
                     ci = binaryData@g2O1, di = binaryData@g2O2, slab = binaryData@studyNames, 
                     method = params$rm.method, measure = params$measure, 
                     level = params$conf.level, digits = params$digits)
             }
             else {
                 res <- rma.uni(yi = binaryData@y, sei = binaryData@SE, 
                     slab = binaryData@studyNames, method = params$rm.method, 
                     level = params$conf.level, digits = params$digits)
             }
             getwd()
             forest_path <- "./r_tmp/forest.png"
             png(forest_path)
             forest.rma(res, digits = params$digits)
             dev.off()
             images <- c(`forest plot` = forest_path)
             plot_names <- c(`forest plot` = "forest_plot")
             results <- list(images = images, summary = res, plot_names = plot_names)
         }
         results
       }

