knn.cv                 package:class                 R Documentation

_k-_N_e_a_r_e_s_t _N_e_i_g_h_b_o_u_r _C_r_o_s_s-_V_a_l_i_d_a_t_o_r_y _C_l_a_s_s_i_f_i_c_a_t_i_o_n

_D_e_s_c_r_i_p_t_i_o_n:

     k-nearest neighbour cross-validatory classification from training
     set.

_U_s_a_g_e:

     knn.cv(train, cl, k = 1, l = 0, prob = FALSE, use.all = TRUE)

_A_r_g_u_m_e_n_t_s:

   train: matrix or data frame of training set cases. 

      cl: factor of true classifications of training set 

       k: number of neighbours considered. 

       l: minimum vote for definite decision, otherwise 'doubt'. (More
          precisely, less than 'k-l' dissenting votes are allowed, even
          if 'k' is increased by ties.) 

    prob: If this is true, the proportion of the votes for the winning
          class are returned as attribute 'prob'. 

 use.all: controls handling of ties. If true, all distances equal to
          the 'k'th largest are included. If false, a random selection
          of distances equal to the 'k'th is chosen to use exactly 'k'
          neighbours. 

_D_e_t_a_i_l_s:

     This uses leave-one-out cross validation. For each row of the
     training set 'train', the 'k' nearest (in Euclidean distance)
     other training set vectors are found, and the classification is
     decided by majority vote, with ties broken at random. If there are
     ties for the 'k'th nearest vector, all candidates are included in
     the vote.

_V_a_l_u_e:

     factor of classifications of training set. 'doubt' will be
     returned as 'NA'.

_R_e_f_e_r_e_n_c_e_s:

     Ripley, B. D. (1996) _Pattern Recognition and Neural Networks._
     Cambridge.

     Venables, W. N. and Ripley, B. D. (2002) _Modern Applied
     Statistics with S._ Fourth edition.  Springer.

_S_e_e _A_l_s_o:

     'knn'

_E_x_a_m_p_l_e_s:

     train <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
     cl <- factor(c(rep("s",50), rep("c",50), rep("v",50)))
     knn.cv(train, cl, k = 3, prob = TRUE)
     attributes(.Last.value)

