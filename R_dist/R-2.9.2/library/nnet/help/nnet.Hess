nnetHess                package:nnet                R Documentation

_E_v_a_l_u_a_t_e_s _H_e_s_s_i_a_n _f_o_r _a _N_e_u_r_a_l _N_e_t_w_o_r_k

_D_e_s_c_r_i_p_t_i_o_n:

     Evaluates the Hessian (matrix of second derivatives) of the
     specified neural network. Normally called via argument 'Hess=TRUE'
     to 'nnet' or via 'vcov.multinom'.

_U_s_a_g_e:

     nnetHess(net, x, y, weights)

_A_r_g_u_m_e_n_t_s:

     net: object of class 'nnet' as returned by 'nnet'. 

       x: training data. 

       y: classes for training data. 

 weights: the (case) weights used in the 'nnet' fit. 

_V_a_l_u_e:

     square symmetric matrix of the Hessian evaluated at the weights
     stored in the net.

_R_e_f_e_r_e_n_c_e_s:

     Ripley, B. D. (1996) _Pattern Recognition and Neural Networks._
     Cambridge.

     Venables, W. N. and Ripley, B. D. (2002) _Modern Applied
     Statistics with S._ Fourth edition.  Springer.

_S_e_e _A_l_s_o:

     'nnet', 'predict.nnet'

_E_x_a_m_p_l_e_s:

     # use half the iris data
     ir <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
     targets <- matrix(c(rep(c(1,0,0),50), rep(c(0,1,0),50), rep(c(0,0,1),50)),
     150, 3, byrow=TRUE)
     samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
     ir1 <- nnet(ir[samp,], targets[samp,], size=2, rang=0.1, decay=5e-4, maxit=200)
     eigen(nnetHess(ir1, ir[samp,], targets[samp,]), TRUE)$values

