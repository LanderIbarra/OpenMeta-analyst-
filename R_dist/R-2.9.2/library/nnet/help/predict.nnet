predict.nnet              package:nnet              R Documentation

_P_r_e_d_i_c_t _N_e_w _E_x_a_m_p_l_e_s _b_y _a _T_r_a_i_n_e_d _N_e_u_r_a_l _N_e_t

_D_e_s_c_r_i_p_t_i_o_n:

     Predict new examples by a trained neural net.

_U_s_a_g_e:

     ## S3 method for class 'nnet':
     predict(object, newdata, type = c("raw","class"), ...)

_A_r_g_u_m_e_n_t_s:

  object: an object of class 'nnet' as  returned by 'nnet'. 

 newdata: matrix or data frame of test examples. A vector is considered
          to be a row vector comprising a single case. 

    type: Type of output 

     ...: arguments passed to or from other methods. 

_D_e_t_a_i_l_s:

     This function is a method for the generic function 'predict()' for
     class '"nnet"'. It can be invoked by calling 'predict(x)' for an
     object 'x' of the appropriate class, or directly by calling
     'predict.nnet(x)' regardless of the class of the object.

_V_a_l_u_e:

     If 'type = "raw"', the matrix of values returned by the trained
     network; if 'type = "class"', the corresponding class (which is
     probably only useful if the net was generated by 'nnet.formula').

_R_e_f_e_r_e_n_c_e_s:

     Ripley, B. D. (1996) _Pattern Recognition and Neural Networks._
     Cambridge.

     Venables, W. N. and Ripley, B. D. (2002) _Modern Applied
     Statistics with S._ Fourth edition.  Springer.

_S_e_e _A_l_s_o:

     'nnet', 'which.is.max'

_E_x_a_m_p_l_e_s:

     # use half the iris data
     ir <- rbind(iris3[,,1], iris3[,,2], iris3[,,3])
     targets <- class.ind( c(rep("s", 50), rep("c", 50), rep("v", 50)) )
     samp <- c(sample(1:50,25), sample(51:100,25), sample(101:150,25))
     ir1 <- nnet(ir[samp,], targets[samp,],size = 2, rang = 0.1,
                 decay = 5e-4, maxit = 200)
     test.cl <- function(true, pred){
             true <- max.col(true)
             cres <- max.col(pred)
             table(true, cres)
     }
     test.cl(targets[-samp,], predict(ir1, ir[-samp,]))

     # or
     ird <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
             species=factor(c(rep("s",50), rep("c", 50), rep("v", 50))))
     ir.nn2 <- nnet(species ~ ., data = ird, subset = samp, size = 2, rang = 0.1,
                 decay = 5e-4, maxit = 200)
     table(ird$species[-samp], predict(ir.nn2, ird[-samp,], type = "class"))

