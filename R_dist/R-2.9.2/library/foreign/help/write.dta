write.dta              package:foreign              R Documentation

_W_r_i_t_e _F_i_l_e_s _i_n _S_t_a_t_a _B_i_n_a_r_y _F_o_r_m_a_t

_D_e_s_c_r_i_p_t_i_o_n:

     Writes the data frame to file in the Stata binary format.  Does
     not write array variables unless they can be 'drop'-ed to a
     vector.

_U_s_a_g_e:

     write.dta(dataframe, file, version = 7L,
               convert.dates = TRUE, tz = "GMT",
               convert.factors = c("labels", "string", "numeric", "codes"))

_A_r_g_u_m_e_n_t_s:

dataframe: a data frame.

    file: character string giving filename.

 version: integer: Stata version: 6, 7, 8 and 10 are supported, and 9
          is mapped to 8.

convert.dates: Convert 'Date' and 'POSIXt' objects to Stata dates?

      tz: timezone for date conversion

convert.factors: how to handle factors

_D_e_t_a_i_l_s:

     The major differences between file formats in Stata versions is
     that version 7.0 and later allow 32-character variable names (5
     and 6 were restricted to 8-character name).  The 'abbreviate'
     function is used to trim long variables to the permitted length. 
     A warning is given if this is needed and it is an error for the
     abbreviated names not to be unique.

     The columns in the data frame become variables in the Stata data
     set. Missing values are correctly handled.

     Unless deselected, R date and date-time objects ('POSIXt' classes)
     are converted into the Stata format.  For date-time objects this
     may lose information - Stata dates are in days since 1960-1-1.
     'POSIXct' objects can be written without conversion but will not
     be understood as dates by Stata; 'POSIXlt' objects cannot be
     written without conversion.

     There are four options for handling factors.  The default is to
     use Stata 'value labels' for the factor levels. With
     'convert.factors="string"', the factor levels are written as
     strings.  With 'convert.factors="numeric"' the numeric values of
     the levels are written, or 'NA' if they cannot be coerced to
     numeric.  Finally, 'convert.factors="codes"' writes the underlying
     integer codes of the factors.  This last used to be the only
     available method and is provided largely for backwards
     compatibility.

     For Stata 8 or later use the default 'version=7' - the only
     advantage of Stata 8 format is that it can represent multiple
     different missing value types, and R doesn't have them.  Stata 10
     allows longer format lists, but R does not make use of them.

     Note that the Stata formats are documented to be use ASCII strings
     - R does not enforce this, but use of non-ASCII character strings
     will not be portable as the encoding is not recorded.  Up to 244
     bytes are allowed in character data, and longer strings will be
     truncated with a warning.

     Stata uses some large numerical values to represent missing
     values.  This function does not currently check, and hence
     integers greater than '2147483620' and doubles greater than
     '8.988e+307' may be misinterpreted by Stata.

_V_a_l_u_e:

     'NULL'

_A_u_t_h_o_r(_s):

     Thomas Lumley

_R_e_f_e_r_e_n_c_e_s:

     Stata 6.0 Users Manual, Stata 7.0 Programming manual, Stata 8.0,
     9.0 online help describe the file formats.

_S_e_e _A_l_s_o:

     'read.dta', 'attributes', 'DateTimeClasses', 'abbreviate'

_E_x_a_m_p_l_e_s:

     write.dta(swiss, swissfile <- tempfile())
     read.dta(swissfile)

